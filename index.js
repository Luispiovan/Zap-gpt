const { Client, MessageMedia, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const axios = require('axios');
require('dotenv').config();

const client = new Client({
  authStrategy: new LocalAuth(),
});

client.on('qr', (qr) => {
  qrcode.generate(qr, { small: true });
});

client.on('authenticated', (session) => console.log(`Autenticado`));

client.on('ready', () => console.log('O zap-gpt está pronto 😋'));

client.on('message_create', (message) => commands(message));

client.initialize();

const headers = {
  Authorization: `Bearer ${process.env.OPENAI_KEY}`,
  'Content-Type': 'application/json',
};

const axiosInstance = axios.create({
  baseURL: 'https://api.openai.com/',
  timeout: 120000,
  headers: headers,
});

const getDavinciResponse = async (clientText) => {
  const body = {
    model: 'text-davinci-003',
    prompt: clientText,
    max_tokens: 4000,
    temperature: 1,
  };

  try {
    const { data } = await axiosInstance.post('v1/completions', body);
    const botAnswer = data.choices[0].text;
    return `ChatGPT 🤖 ${botAnswer}`;
  } catch (e) {
    return `❌ OpenAI Response Error`;
  }
};

const getDalleResponse = async (clientText) => {
  const body = {
    prompt: clientText,
    n: 1,
    size: '1024x1024',
  };

  try {
    const { data } = await axiosInstance.post('v1/images/generations', body);
    return data.data[0].url;
  } catch (e) {
    return `❌ OpenAI Response Error`;
  }
};

const commands = async (message) => {
  const iaCommands = {
    davinci3: '/bot',
    dalle: '/img',
  };
  let firstWord = message.body.substring(0, message.body.indexOf(' '));
  const sender = message.from.includes(process.env.PHONE_NUMBER)
    ? message.to
    : message.from;
  switch (firstWord) {
    case iaCommands.davinci3:
      const question = message.body.substring(message.body.indexOf(' '));
      getDavinciResponse(question).then(async (response) => {
        const contact = await message.getContact();
        client.sendMessage(
          sender,
          `${response}\n\n_Generated by @${contact.id.user}_`,
          { mentions: [contact] }
        );
      });
      break;

    case iaCommands.dalle:
      const imgDescription = message.body.substring(message.body.indexOf(' '));
      const contact = await message.getContact();
      getDalleResponse(imgDescription, message).then(async (imgUrl) => {
        const media = await MessageMedia.fromUrl(imgUrl);
        const options = {
          mentions: [contact],
          caption: `_Generated by @${contact.id.user}_`,
          media: media,
          sendMediaAsSticker: true,
        };
        await client.sendMessage(sender, media, options);
      });
      break;
  }
};
